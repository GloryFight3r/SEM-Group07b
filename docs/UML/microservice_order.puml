@startuml

class Order {
    - foodList: List<Food>
    - id: int
    - userID: int
    - pickupTime: LocalDateTime
    - storeID: int
    - price: Double
    - couponIds: List<Integer>
    --
    getters & setters...
    + calculatePrice(): Double
}

abstract class Coupon {
 - id: int
 - description: String

 + getId(): int
 + getDescription(): String
 {abstract}{static}+ validate(id: int): boolean
 {abstract}+ calculatePrice(order: Order): double
}

class OrderAPI {
    + createOrder(token: String, order: Order): Order
    + editOrder(token: String, order: Order): Order
    + deleteOrder(token: String, order: Order): Boolean
    + getOrders(token: String, user: int): List<Order>
    + getOrdersAdmin(token: String): List<Order>
    + notifyOrderCreated(order: Order): Boolean
    + notifyOrderChanged(order: Order): Boolean
    + notifyOrderDeleted(orderID: int): Boolean
}

footer Order microservice UML class diagram
@enduml